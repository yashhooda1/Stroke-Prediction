library(randomForest)
library(dplyr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(magrittr)
# specify which values want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, #CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
accuracy_metric <- metric_set(accuracy)
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("workflows")
install.packages("tune")
install.packages("randomForest")
install.packages("dplyr")
install.packages("caret")
install.packages("rsample")
install.packages("recipes")
install.packages("parsnip")
install.packages("yardstick")
install.packages("magrittr")
install.packages("dplyr")
install.packages("magrittr")
install.packages("dplyr")
library(tidymodels)
library(tidyverse)
library(workflows)
library(tune)
library(caret)
library(randomForest)
library(dplyr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(magrittr)
## Describe and explore the data
stroke_data <- read.csv("C:\\Users\\yashh\\OneDrive\\Desktop\\R Projects\\Stroke Prediction Project\\healthcare-dataset-stroke-data.csv")
summary(stroke_data)
ggplot(stroke_data) +
geom_histogram(aes(x = avg_glucose_level))
ggplot(stroke_data) +
geom_histogram(aes(x = stroke))
stroke_clean <- stroke_data %>%
mutate_at(vars(gender, age, hypertension, heart_disease, avg_glucose_level, bmi, smoking_status, stroke),
function(.var) {
if_else(condition = (.var == 0), # if true (i.e. the entry is 0)
true = as.numeric(NA),  # replace the value with NA
false = .var # otherwise leave it as it is
)
})
rlang::last_trace()
#Split the data into train/test split
set.seed(234589)
# split the data into trainng (75%) and testing (25%)
stroke_split <- initial_split(stroke_clean,
prop = 3/4)
stroke_split
# extract training and testing sets
stroke_train <- training(stroke_split)
stroke_test <- testing(stroke_split)
#Create a CV object from training data
stroke_cv <- vfold_cv(stroke_train)
stroke_recipe <-
# which consists of the formula (outcome ~ predictors)
recipe(stroke ~ gender + heart_disease + avg_glucose_level + bmi + hypertension +
smoking_status + age,
data = stroke_clean) %>%
# and some pre-processing steps
step_normalize(all_numeric()) %>%
step_impute_knn(all_predictors())
stroke_recipe
stroke_train_preprocessed <- stroke_recipe %>%
# apply the recipe to the training data
prep(stroke_train) %>%
# extract the pre-processed training dataset
juice()
stroke_train_preprocessed
rf_model <-
# specify that the model is a random forest
rand_forest() %>%
# specify that the `mtry` parameter needs to be tuned
set_args(mtry = tune()) %>%
# select the engine/package that underlies the model
set_engine("ranger", importance = "impurity") %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
lr_model <-
# specify that the model is a random forest
logistic_reg() %>%
# select the engine/package that underlies the model
set_engine("glm") %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
# set the workflow
rf_workflow <- workflow() %>%
# add the recipe
add_recipe(stroke_recipe) %>%
# add the model
add_model(rf_model)
# specify which values want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, #CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
library(yardstick)
# Specify which values you want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# Extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, # CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
# Specify which values you want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# Extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, # CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
install.packages("yardstick")
install.packages("yardstick")
library(yardstick)
# Specify which values you want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# Extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, # CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
library(dplyr)
# Specify which values you want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# Extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, # CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
library(tune)
# Specify which values you want to try
rf_grid <- expand.grid(mtry = c(3, 4, 5))
# Extract results
rf_tune_results <- rf_workflow %>%
tune_grid(resamples = stroke_cv, # CV object
grid = rf_grid, # grid of values to try
metrics = metric_set(accuracy, roc_auc) # metrics we care about
)
rf_tune_results %>%
collect_metrics()
## Load data and install packages
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("workflows")
install.packages("tune")
install.packages("randomForest")
install.packages("tune")
library(tidymodels)
library(tidyverse)
library(workflows)
library(tune)
library(caret)
library(randomForest)
library(dplyr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(magrittr)
stroke_data <- read.csv("C:\\Users\\yashh\\OneDrive\\Desktop\\R Projects\\Stroke Prediction Project\\healthcare-dataset-stroke-data.csv")
summary(stroke_data)
ggplot(stroke_data) +
geom_histogram(aes(x = avg_glucose_level))
ggplot(stroke_data) +
geom_histogram(aes(x = stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))+geom_point(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))+geom_jitter(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))+geom_point(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))+geom_jitter(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))+geom_jitter(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=heart_disease,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))+geom_jitter(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))+geom_jitter(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))+geom_jitter(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))+geom_jitter(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))+geom_jitter(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=bmi,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))+geom_jitter(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))+geom_jitter(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))+geom_jitter(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=heart_disease,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))+geom_jitter(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=smoking_status,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=avg_glucose_level,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=hypertension,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=hypertension,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=gender,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=gender,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=Residence_type,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=ever_married,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=work_type,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=ever_married,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=Residence_type,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=gender,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=hypertension,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=avg_glucose_level,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=smoking_status,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=heart_disease,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=heart_disease,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=heart_disease,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=bmi,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=bmi,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=bmi,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=bmi,fill=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=age,fill=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=age,y=stroke))
ggplot(data=stroke_data)+geom_bar(mapping=aes(x=bmi,fill=stroke))
ggplot(data=stroke_data, aes(x = bmi, y = stroke)) +
geom_boxplot() +
labs(x = "BMI Category", y = "Number of Strokes") +
ggtitle("Box Plot of BMI vs. Number of Strokes")
ggplot(data=stroke_data, aes(x = bmi, y = stroke)) +
geom_point() +
labs(x = "BMI", y = "Number of Strokes") +
ggtitle("Scatter Plot of BMI vs. Number of Strokes")
ggplot(data=stroke_data, aes(x = bmi, fill = stroke)) +
geom_histogram(binwidth = 1) +
labs(x = "BMI", y = "Frequency") +
ggtitle("Histogram of BMI by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
ggplot(data=stroke_data, aes(x = stroke, fill = bmi)) +
geom_histogram(binwidth = 1) +
labs(x = "stroke", y = "Frequency") +
ggtitle("Histogram of BMI by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
ggplot(data=stroke_data, aes(x = stroke, fill = bmi)) +
+     geom_histogram(binwidth = 1) +
+     labs(x = "stroke", y = "Frequency") +
+     ggtitle("Histogram of BMI by Stroke Status") +
+     facet_wrap(~ stroke, ncol = 2)
ggplot(data=stroke_data, aes(x = bmi, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "BMI", y = "Density") +
ggtitle("Density Plot of BMI by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
ggplot(data=stroke_data, aes(x = stroke, y = bmi, fill = stroke)) +
geom_violin() +
labs(x = "Stroke", y = "BMI") +
ggtitle("Violin Plot of BMI by Stroke Status")
ggplot(data=stroke_data, aes(x = bmi, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "BMI", y = "Density") +
ggtitle("Density Plot of BMI by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("workflows")
install.packages("tune")
install.packages("randomForest")
install.packages("dplyr")
install.packages("caret")
install.packages("rsample")
install.packages("recipes")
install.packages("parsnip")
install.packages("yardstick")
install.packages("magrittr")
install.packages("dplyr")
install.packages("recipes")
install.packages("dplyr")
install.packages("magrittr")
install.packages("magrittr")
library(tidymodels)
library(tidyverse)
library(workflows)
library(tune)
library(caret)
library(randomForest)
library(dplyr)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
stroke_data <- read.csv("C:\\Users\\yashh\\OneDrive\\Desktop\\R Projects\\Stroke Prediction Project\\healthcare-dataset-stroke-data.csv")
summary(stroke_data)
ggplot(stroke_data) +
geom_histogram(aes(x = avg_glucose_level))
ggplot(stroke_data) +
geom_histogram(aes(x = stroke))
ggplot(data=stroke_data, aes(x = age, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "Age", y = "Density") +
ggtitle("Density Plot of Age by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
ggplot(data=stroke_data, aes(x = bmi, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "BMI", y = "Density") +
ggtitle("Density Plot of BMI by Stroke Status") +
facet_wrap(~ stroke, ncol = 2)
ggplot(data = stroke_data, aes(x = heart_disease, fill = stroke)) +
geom_bar(position = "dodge") +
labs(x = "Heart Disease", y = "Count") +
ggtitle("Bar Plot of Strokes by Heart Disease Status")
ggplot(data = stroke_data, aes(x = smoking_status, fill = factor(stroke))) +
geom_bar() +
labs(x = "Smoking Status", y = "Count") +
ggtitle("Bar Plot of Strokes by Smoking Status")
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke))
ggplot(data = stroke_data, aes(x = avg_glucose_level, y = num_strokes)) +
geom_point() +
labs(x = "Average Glucose Level", y = "Number of Strokes") +
ggtitle("Scatter Plot of Average Glucose Level vs. Number of Strokes")
ggplot(data = stroke_data, aes(x = avg_glucose_level, y = stroke)) +
geom_point() +
labs(x = "Average Glucose Level", y = "Number of Strokes") +
ggtitle("Scatter Plot of Average Glucose Level vs. Number of Strokes")
ggplot(data = stroke_data, aes(x = stroke, y = avg_glucose_level)) +
geom_boxplot() +
labs(x = "Stroke", y = "Average Glucose Level") +
ggtitle("Box Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "Average Glucose Level", y = "Density") +
ggtitle("Density Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, group = stroke, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "Average Glucose Level", y = "Density") +
ggtitle("Density Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, fill = stroke)) +
geom_histogram(binwidth = 5, position = "identity") +
labs(x = "Average Glucose Level", y = "Frequency") +
ggtitle("Histogram of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, fill = factor(stroke))) +
geom_histogram(binwidth = 5, position = "identity") +
labs(x = "Average Glucose Level", y = "Frequency") +
ggtitle("Histogram of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = stroke, y = avg_glucose_level, fill = stroke)) +
geom_violin() +
labs(x = "Stroke", y = "Average Glucose Level") +
ggtitle("Violin Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, fill = stroke)) +
geom_density(alpha = 0.5) +
labs(x = "Average Glucose Level", y = "Density") +
ggtitle("Density Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = stroke, y = avg_glucose_level)) +
geom_boxplot() +
labs(x = "Stroke", y = "Average Glucose Level") +
ggtitle("Box Plot of Average Glucose Level by Stroke Status")
ggplot(data = stroke_data, aes(x = avg_glucose_level, y = num_strokes)) +
geom_point() +
labs(x = "Average Glucose Level", y = "Number of Strokes") +
ggtitle("Scatter Plot of Average Glucose Level vs. Number of Strokes")
ggplot(data = stroke_data, aes(x = avg_glucose_level, y = stroke)) +
geom_point() +
labs(x = "Average Glucose Level", y = "Number of Strokes") +
ggtitle("Scatter Plot of Average Glucose Level vs. Number of Strokes")
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke))
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke)) +
labs(x = "Average Glucose Level", y = "Density") +
ggtitle("Density Plot of Average Glucose Level by Stroke Status")
ggplot(data=stroke_data)+geom_smooth(mapping=aes(x=avg_glucose_level,y=stroke)) +
labs(x = "Average Glucose Level", y = "Stroke") +
ggtitle("Line Plot of Average Glucose Level by Stroke")
ggplot(data = stroke_data, aes(x = hypertension, fill = stroke)) +
geom_bar(position = "dodge" / "stack") +
labs(x = "Hypertension", y = "Count") +
ggtitle("Bar Plot of Strokes by Hypertension Status")
ggplot(data = stroke_data, aes(x = hypertension, fill = stroke)) +
geom_bar(position = "dodge") +
labs(x = "Hypertension", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Hypertension Status")
ggplot(data = stroke_data, aes(x = hypertension, fill = stroke)) +
geom_bar(position = "stack") +
labs(x = "Hypertension", y = "Count") +
ggtitle("Stacked Bar Plot of Strokes by Hypertension Status")
ggplot(data = stroke_data, aes(x = hypertension, fill = factor(stroke))) +
geom_bar(position = "dodge") +
labs(x = "Hypertension", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Hypertension Status")
ggplot(data = stroke_data, aes(x = gender, fill = stroke)) +
geom_bar(position = "dodge" / "stack") +
labs(x = "Gender", y = "Count") +
ggtitle("Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = stroke)) +
geom_bar(position = "dodge") +
labs(x = "Gender", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
geom_bar(position = "dodge") +
labs(x = "Gender", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
geom_bar(position = "dodge") +
labs(x = "Gender", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = stroke)) +
geom_bar(position = "stack") +
labs(x = "Gender", y = "Count") +
ggtitle("Stacked Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
geom_bar(position = "stack") +
labs(x = "Gender", y = "Count") +
ggtitle("Stacked Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
geom_bar(position = "dodge") +
labs(x = "Gender", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
+   geom_bar(position = "stack") +
+   labs(x = "Gender", y = "Count") +
+   ggtitle("Stacked Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = gender, fill = factor(stroke))) +
geom_bar(position = "stack") +
labs(x = "Gender", y = "Count") +
ggtitle("Stacked Bar Plot of Strokes by Gender")
ggplot(data = stroke_data, aes(x = Residence_type, fill = stroke)) +
geom_bar(position = "dodge" / "stack") +
labs(x = "Residence Type", y = "Count") +
ggtitle("Bar Plot of Strokes by Residence Type")
ggplot(data = stroke_data, aes(x = Residence_type, fill = stroke)) +
geom_bar(position = "dodge") +
labs(x = "Residence Type", y = "Count") +
ggtitle("Grouped Bar Plot of Strokes by Residence Type")
ggplot(data = stroke_data, aes(x = Residence_type, fill = stroke)) +
geom_bar(position = "dodge") +
labs(x = "Residence Type", y = "Count") +
ggtitle("Bar Plot of Strokes by Residence Type")
ggplot(data = stroke_data, aes(x = Residence_type, fill = ever_married)) +
geom_bar(position = "stack") +
labs(x = "Residence Type", fill = "Marital Status", y = "Count") +
ggtitle("Faceted Bar Plot of Strokes by Residence and Marital Status") +
facet_wrap(~ever_married)
ggplot(data = stroke_data, aes(x = Residence_type, fill = work_type)) +
geom_bar(position = "stack") +
labs(x = "Residence Type", fill = "Work Type", y = "Count") +
ggtitle("Faceted Bar Plot of Strokes by Residence and Work Type") +
facet_wrap(~work_type)
num_vars <- c("avg_glucose_level", "bmi")
stroke_data[num_vars] <- lapply(stroke_data[num_vars], function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
cat_vars <- c("gender", "ever_married", "work_type", "Residence_type", "smoking_status")
stroke_data[cat_vars] <- lapply(stroke_data[cat_vars], function(x) ifelse(is.na(x), names(sort(table(x), decreasing = TRUE)[1]), x))
stroke_data <- stroke_data %>%
select(-id) %>%  # Remove the 'id' column if not useful for modeling
mutate_if(is.character, as.factor) %>%
mutate_if(is.factor, as.numeric)
set.seed(5111)  # for reproducibility
train_index <- createDataPartition(stroke_data$stroke, p = 0.7, list = FALSE)
train_data <- stroke_data[train_index, ]
test_data <- stroke_data[-train_index, ]
model_rf <- randomForest(stroke ~ ., data = train_data, ntree = 100)
print(model_rf)
predictions <- predict(model_rf, test_data, type = "response")
confusion_matrix <- table(Actual = test_data$stroke, Predicted = predictions)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2])
recall <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ])
f1_score <- 2 * (precision * recall) / (precision + recall)
library(pROC)
roc_curve <- roc(test_data$stroke, as.numeric(predictions))
plot(roc_curve)
print(precision)
print(f1_score)
num_vars <- c("avg_glucose_level", "bmi")
stroke_data[num_vars] <- lapply(stroke_data[num_vars], function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
cat_vars <- c("gender", "ever_married", "work_type", "Residence_type", "smoking_status")
stroke_data[cat_vars] <- lapply(stroke_data[cat_vars], function(x) ifelse(is.na(x), names(sort(table(x), decreasing = TRUE)[1]), x))
stroke_data <- stroke_data %>%
select(-id) %>%  # Remove the 'id' column if not useful for modeling
mutate_if(is.character, as.factor) %>%
mutate_if(is.factor, as.numeric)
set.seed(123)  # for reproducibility
train_index <- createDataPartition(stroke_data$stroke, p = 0.7, list = FALSE)
train_data <- stroke_data[train_index, ]
test_data <- stroke_data[-train_index, ]
model_rf <- randomForest(stroke ~ ., data = train_data, ntree = 100)
print(model_rf)
predictions <- predict(model_rf, test_data, type = "response")
confusion_matrix <- table(Actual = test_data$stroke, Predicted = predictions)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
precision <- confusion_matrix[2, 2] / sum(confusion_matrix[, 2])
recall <- confusion_matrix[2, 2] / sum(confusion_matrix[2, ])
f1_score <- 2 * (precision * recall) / (precision + recall)
library(pROC)
roc_curve <- roc(test_data$stroke, as.numeric(predictions))
plot(roc_curve)
